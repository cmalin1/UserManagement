Parameters: 
  InstanceType:
    Default: t2.micro
    Type: String
    Description: Sizing for EC2 Instances
  KeyName:
    Default: vockey
    Type: String
    Description: Key to access EC2 Instances via SSH
  Stage:
    Default: dev
    Type: String
    Description: Default Environment to Create
  BlueWeight:
    Default: 1
    Type: String
    Description: LB Weight for Blue Instance(s)
  GreenWeight:
    Default: 1
    Type: String
    Description: LB Weight for Green Instance(s)
  LabRole:
    Default: LabRole
    Type: String
    Description: Look up LabRole in AWS Academy
Resources:
 
# Target Group, Listener and Application  Load Balancer
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      HealthCheckPath: '/UserManagement'
      Matcher:
        HttpCode: '200,302'
      Name: BlueTargetGroup
      Port: 8080
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue user-management-vpc

# Target Group, Listener and Application  Load Balancer
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: GreenTargetGroup
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !ImportValue user-management-vpc

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref BlueTargetGroup
                Weight: !Ref BlueWeight

      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Subnets:
      - !ImportValue user-management-vpc-PublicSubnet1
      - !ImportValue user-management-vpc-PublicSubnet2
      SecurityGroups:
        - !ImportValue user-management-security-WebSecurityGroupId

  BlueTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !Ref LabRole
      ContainerDefinitions:
        - Name: UserManagement
          Image: '104696712085.dkr.ecr.us-east-1.amazonaws.com/usermanagement:latest'
          Essential: true
          PortMappings:
            - HostPort: 8080
              Protocol: tcp
              ContainerPort: 8080
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: '256'
      Memory: '512'
      Family: ecs-demo
  ECSDemoCluster:
    Type: 'AWS::ECS::Cluster'
    Properties: {}
  ECSDemoService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSDemoCluster
      DesiredCount: 1
      DeploymentController:
        Type: EXTERNAL
  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Ref ECSDemoCluster
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !ImportValue user-management-security-WebSecurityGroupId
          Subnets:
            - !ImportValue user-management-vpc-PublicSubnet1
            - !ImportValue user-management-vpc-PublicSubnet2
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Ref ECSDemoService
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: UserManagement
          ContainerPort: 8080
          TargetGroupArn: !Ref BlueTargetGroup
  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref ECSDemoCluster
      Service: !Ref ECSDemoService
      TaskSetId: !GetAtt 
        - BlueTaskSet
        - Id

Outputs:
  LoadBalancerURL:
    Description: "URL to access our Tomcat Server"
    Value: !Join 
      - ''
      - - 'http://'
        - !GetAtt 
          - ApplicationLoadBalancer
          - DNSName
        - '/UserManagement'
    Export:
      Name: !Sub "${AWS::StackName}-TomcatURL"